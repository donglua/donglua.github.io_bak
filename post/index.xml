<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Post-rsses on My New Hugo Site</title>
    <link>http://this.lu/post/index.xml</link>
    <description>Recent content in Post-rsses on My New Hugo Site</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 16 Nov 2016 23:13:34 +0800</lastBuildDate>
    <atom:link href="http://this.lu/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>structure of dex file</title>
      <link>http://this.lu/post/structure-of-dex-file/</link>
      <pubDate>Wed, 16 Nov 2016 23:13:34 +0800</pubDate>
      
      <guid>http://this.lu/post/structure-of-dex-file/</guid>
      <description>&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-dex-文件&#34;&gt;1. Dex 文件&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Dex（Dalivk Executable）文件是 Android 系统可执行文件，包含应用程序的全部操作指令以及运行时数据。&lt;/li&gt;
&lt;li&gt;虚拟机在执行一个应用程序时，会实时地根据程序需要从 Dex 文件中读取相应的数据以保证程序的正确运行。&lt;/li&gt;
&lt;li&gt;为了运行在资源有限的 Android 系统中，标准的 Java 文件在经过编译后，还需要通过 dx 工具将编译生成的 class 文件整合成一个 Dex 文件。这样使得文件结构十分紧凑，减少了冗余，也提高了类的查找速度。
&lt;img src=&#34;http://ogkb67oc8.bkt.clouddn.com/Groupjava_to_dex.png&#34; alt=&#34;java to dex&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何将&lt;code&gt;Hello.java&lt;/code&gt;编译成一个 .dex 文件：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;pubic class Hello {
  public static void main(String[] args) {
    System.out.println(&amp;quot;Hello, world&amp;quot;);      
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;执行 &lt;code&gt;javac Hello.java&lt;/code&gt; 生成 Hello.class 文件&lt;/p&gt;

&lt;p&gt;执行 &lt;code&gt;dx --dex --output=Hello.dex Hello.class&lt;/code&gt; 把 Hello.class 编译成 Hello.dex 文件&lt;/p&gt;

&lt;h2 id=&#34;2-dex-文件的结构和特点&#34;&gt;2.Dex 文件的结构和特点&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;http://ogkb67oc8.bkt.clouddn.com/dex_file.png&#34; alt=&#34;dex file&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Dex 文件的结构，实际上就是由多个不同的结构体数据以首尾相接的方式拼凑而成。Dex 文件的定义在源码中的&lt;code&gt;AOSP/dalvik/libdex/DexFile.h&lt;/code&gt;文件中，主要结构如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;struct DexFile {
  const DexHeader*    pHeader;
  const DexStringId*  pStringIds;
  const DexTypeId*    pTypeIds;
  const DexFieldId*   pFieldIds;
  const DexMethodId*  pMethodIds;
  const DexProtoId*   pProtoIds;
  const DexClassDef*  pClassDefs;
  const DexLink*      pLinkData;

  ...
};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;首先介绍一下各部分数据的排列方式和主要功能：&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;数据名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;header&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;文件的头部，记录 Dex 文件的相关属性&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;strnig_ids&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;字符数据索引，记录了各个字符在数据区的地址偏移量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;type_ids&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类型数据索引，记录了各个类型的字符串索引&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;proto_ids&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;原型数据索引，记录方法声明的字符串、返回类型字符串、参数列表&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;field_ids&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;字段数据索引，记录了所属类，声明类型以及方法名等信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;method_ids&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类方法声明，记录方法所属类名、方法声明、以及该方法名等信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;class_defs&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;类定义数据，记录了指定类各类信息，包括接口、超类、类数据偏移量等&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;link_data&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接数据区&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&#34;3-各部分结构简介&#34;&gt;3. 各部分结构简介&lt;/h2&gt;

&lt;h3 id=&#34;3-1-header&#34;&gt;3.1 header&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;header 是 Dex 文件的文件头，记录了 Dex 文件的基本信息及大致的数据分布。&lt;/li&gt;
&lt;li&gt;每一项数据所占用的内存空间是相应固定的，总长度固定为 0x70。&lt;/li&gt;
&lt;li&gt;虚拟机在处理 Dex 文件时，只需根据固定的规则读取文件头，即可获取目标 Dex 文件的大致信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-2-string-ids&#34;&gt;3.2 string_ids&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;这一区域存储的是 Dex 文件字符串资源的索引信息，也就是在 Dex 文件数据区所在的真实物理偏移量。&lt;/li&gt;
&lt;li&gt;在 Dex 文件中, 每个字符串都对应一个 DexStringId 数据结构, 该数据结构也是在 &lt;code&gt;dalvik/libdex/DexFile.h&lt;/code&gt;文件中定义，只有一个成员变量。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct DexStringId {
  u4 stringDataOff; /* 在Dex文件中的实际偏移量 */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;读取数据的时候，将 Dex 文件在内存的起始地址加上这个偏移量就得到该字符串在内存中的物理地址。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-3-type-ids&#34;&gt;3.3 type_ids&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;这一区域存储的是类型资源的索引信息。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dalvik/libdex/DexFile.h&lt;/code&gt; 也定义了一个 DexTypeId 来存储这部分信息。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct DexTypeId {
  u4  descriptorIdx; /* 指向字符串索引表 */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;在 Dex 文件中, 类型是以字符串的形式保存在数据区中的, 因此, &lt;code&gt;descriptorIdx&lt;/code&gt; 所保存的是目标类型在字符串索引表中的序列号。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-4-proto-ids&#34;&gt;3.4 proto_ids&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;存储的是方法原型（method prototype）资源的索引信息。&lt;/li&gt;
&lt;li&gt;对应源码中的&lt;code&gt;DexProtoId&lt;/code&gt;数据结构，前两个变量代表的真实资源都是一个字符串，分别表示方法的声明和返回类型。parametersOff 的真实资源是一个 DexTypeList 数据结构。&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct DexProtoId {
    u4  shortyIdx; /* 方法声明字符串，指向字符串索引表s */
    u4  returnTypeIdx; /* 方法返回类型，指向字符串索引表 */
    u4  parametersOff; /* 参数列表，指向DexTypeList数据结构的偏移地址 */
};

struct DexTypeItem {
    u2  typeIdx; /* 参数的类型，指向 DexTypeId 索引表 */
};

struct DexTypeList {
    u4  size;  /* DexTypeItem 的个数 */
    DexTypeItem list[1]; /* DexTypeItem 数据结构列表 */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;DexProtoId&lt;/code&gt;的成员变量都是表示数据的偏移地址，所以即使&lt;code&gt;DexTypeItem&lt;/code&gt;数量不确定，&lt;code&gt;DexProtoId&lt;/code&gt;是一个固定值12B。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-5-field-ids&#34;&gt;3.5 field_ids&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;存储的是字段资源的索引信息。&lt;/li&gt;
&lt;li&gt;对应源码中的&lt;code&gt;DexFieldId&lt;/code&gt;数据结构&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct DexFieldId {
    u2  classIdx; /* 所属类，指向一个DexTypeId */
    u2  typeIdx; /* 该字段类型，指向一个DexTypeId */
    u4  nameIdx; /* 字段名，指向一个DexStringId */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-6-method-ids&#34;&gt;3.6 method_ids&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;存储的是类方法数据的索引信息。&lt;/li&gt;
&lt;li&gt;对应源码中的&lt;code&gt;DexMethodId&lt;/code&gt;数据结构，&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct DexMethodId {
    u2  classIdx; /* 所属类 */
    u2  protoIdx; /* 方法原型类型，指向一个DexProtoId */
    u4  nameIdx; /* 方法名，指向一个DexStringId */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;3-7-class-defs&#34;&gt;3.7 class_defs&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;存储了一个类所需的资源。&lt;/li&gt;
&lt;li&gt;对应源码的&lt;code&gt;DexClassDef&lt;/code&gt;数据结构&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-cpp&#34;&gt;struct DexClassDef {
  u4  classIdx;  /* 所属类，指向一个DexTypeId */
  u4  accessFlags; /* 访问标示符 */
  u4  superclassIdx; /* 超类，指向一个DexTypeId */
  u4  interfacesOff; /* 实现的接口，指向一个DexTypeList */
  u4  sourceFileIdx; /* 源文件名，指向一个DexStringId */
  u4  annotationsOff; /* file offset to annotations_directory_item */
  u4  classDataOff; /* 类数据，指向一个DexClassData */
  u4  staticValuesOff; /* file offset to DexEncodedArray */
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.blogfshare.com/dex-format.html&#34;&gt;http://www.blogfshare.com/dex-format.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.zybuluo.com/dodola/note/554061&#34;&gt;https://www.zybuluo.com/dodola/note/554061&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://source.android.com/devices/tech/dalvik/dex-format.html&#34;&gt;https://source.android.com/devices/tech/dalvik/dex-format.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>